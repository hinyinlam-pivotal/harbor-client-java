# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout harbor-client-java repo for generation script
        uses: actions/checkout@v2
        with:
          path: harbor-client-java 
      
      - name: Checkout official Harbor repo for swagger.yaml
        uses: actions/checkout@v2
        with:
          repository: goharbor/harbor 
          path: harbor
          fetch-depth: 0   

      # Runs a single command using the runners shell
      - name: Showing working directory
        working-directory: .
        run: |
          ls -l

      # Runs a set of commands using the runners shell
      - name: Showing Java Client history
        working-directory: harbor-client-java
        run: |
          ls -l
          git log

      # Runs a set of commands using the runners shell
      - name: Showing goharbor/harbor History
        working-directory: harbor
        run: |
          echo "====================="
          echo "====Describe latest tag we are going to build with===="
          export ON_GIT_TAG="$(git describe --abbrev=0 --tags)"
          echo Tag to work on: ${ON_GIT_TAG}
          echo "ON_GIT_TAG=$ON_GIT_TAG" >> $GITHUB_ENV
          
          echo "====What's the news===="          
          git log -n 1
          echo "====================="
        
      - name: Checkout latest release tag and copy both new and legacy swagger definition
        working-directory: harbor
        run: |
          git checkout tags/${ON_GIT_TAG} -b ${ON_GIT_TAG}
          cp  api/v2.0/swagger.yaml ../
          cp  api/v2.0/legacy_swagger.yaml ../
          ls ../
          
      - name: Download and install OpenAPIGenerator
        run: |
          mkdir -p ~/bin/openapitools
          curl https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh > ~/bin/openapitools/openapi-generator-cli
          chmod u+x ~/bin/openapitools/openapi-generator-cli
          export PATH=$PATH:~/bin/openapitools/
          ~/bin/openapitools/openapi-generator-cli version
          
      - name: Download and OpenAPI Generator
        run: |
          export PATH=$PATH:~/bin/openapitools/
          openapi-generator-cli version
          
      - name: Generate API Client with NEW version of Swagger.yaml using OpenAPI Generator
        run: |
          export PATH=$PATH:~/bin/openapitools/
          openapi-generator-cli generate -i swagger.yaml -g java --api-package io.goharbor.client.openapi.apis --model-package io.goharbor.client.openapi.models -p artifactId=client-java,groupId=io.goharbor -p artifactVersion=2.0 --output harbor-client-java/

      - name: Generate API Client with LEGACY version of legacy-swagger.yaml using OpenAPI Generator
        run: |
          export PATH=$PATH:~/bin/openapitools/
          openapi-generator-cli generate -i legacy-swagger.yaml -g java --api-package io.goharbor.client.openapi.apis --model-package io.goharbor.client.openapi.models -p artifactId=client-java,groupId=io.goharbor -p artifactVersion=2.0-legacy --output harbor-client-java-legacy/

      - name: Package Generated client (NEW Swagger) into Single Jar file
        working-directory: harbor-client-java
        run: |
          mkdir -p ../generated-artifacts/
          patch pom.xml.patch
          mvn clean package
          mv -v target/*.jar ../generated-artifacts/

      - name: Package Generated client (Legacy Swagger) into Single Jar file
        working-directory: harbor-client-java-legacy
        run: |
          mkdir -p ../generated-artifacts/
          patch pom.xml.patch
          mvn clean package
          mv -v target/*.jar ../generated-artifacts/

      - name: Showing what artifacts it has generated
        run: |
            ls -la ../generated-artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "Release ${{ env.ON_GIT_TAG }}"
          draft: false
          prerelease: false
          
      - name: Upload Client Release Library Jar (New Swagger)
        id: upload-release-asset-lib-jar-new-swagger
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: generated-artifacts/client-java-2.0.jar
          asset_name: client-java-2.0.jar
          asset_content_type: application/jar

      - name: Upload Client Release Source Jar (New Swagger)
        id: upload-release-asset-src-jar-new-swagger
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: generated-artifacts/client-java-2.0-sources.jar
          asset_name: client-java-2.0-sources.jar
          asset_content_type: application/jar
         
      - name: Upload Client Release Java Doc Jar (New Swagger)
        id: upload-release-asset-doc-jar-new-swagger
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: generated-artifacts/client-java-2.0-javadoc.jar
          asset_name: client-java-2.0-javadoc.jar
          asset_content_type: application/jar
        
      - name: Upload Client Release Test Jar (New Swagger)
        id: upload-release-asset-test-jar-new-swagger
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: generated-artifacts/client-java-2.0-tests.jar
          asset_name: client-java-2.0-tests.jar
          asset_content_type: application/jar    

#####Legacy Jar upload:

      - name: Upload Client Release Library Jar (Legacy Swagger)
        id: upload-release-asset-lib-jar-legacy-swagger
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: generated-artifacts/client-java-2.0-legacy.jar
          asset_name: client-java-2.0-legacy.jar
          asset_content_type: application/jar

      - name: Upload Client Release Source Jar (Legacy Swagger)
        id: upload-release-asset-src-jar-legacy-swagger
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: generated-artifacts/client-java-2.0-legacy-sources.jar
          asset_name: client-java-2.0-legacy-sources.jar
          asset_content_type: application/jar

      - name: Upload Client Release Java Doc Jar (Legacy Swagger)
        id: upload-release-asset-doc-jar-legacy-swagger
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: generated-artifacts/client-java-2.0-legacy-javadoc.jar
          asset_name: client-java-2.0-legacy-javadoc.jar
          asset_content_type: application/jar

      - name: Upload Client Release Test Jar (Legacy Swagger)
        id: upload-release-asset-test-jar-legacy-swagger
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: generated-artifacts/client-java-2.0-legacy-tests.jar
          asset_name: client-java-2.0-legacy-tests.jar
          asset_content_type: application/jar